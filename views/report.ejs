<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/style.css">
    <title>Weather Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0 2% 0 2%;
            padding: 0 2% 0 2%;
            background-color: #f4f4f4;
            color: #333;
        }

        .navbar {
            background-color: transparent;
            padding: 10px 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .navbar a {
            color: #f2f2f2;
            text-decoration: none;
            font-size: 18px;
            padding: 0 15px;
            text-transform: uppercase;
            font-weight: bold;
        }

        .navbar a:hover {
            color: #ffffff;
        }

        .navbar .logo {
            font-family: 'Pacifico', cursive;
            font-size: 1.75rem;
            color: #f2f2f2;
        }

        .report-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-top: 3%;
        }

        .report-content h2 {
            font-size: 1.5em;
            margin-bottom: 10px;
        }

        .report-content p {
            margin: 10px 0;
            line-height: 1.6;
        }

        .report-content strong {
            font-weight: bold;
        }

        .analysis-section {
            margin-top: 20px;
            padding: 15px;
            background-color: #eef7f8;
            border-left: 5px solid #00aaff;
            border-radius: 5px;
        }

        .analysis-section strong {
            color: #0077cc;
        }

        .conclusion {
            margin-top: 20px;
            padding: 10px;
            background-color: #e7f3fe;
            border-left: 5px solid #2196f3;
        }

        .graph-container {
            margin-top: 30px;
        }

        .graph {
            height: 50%;
            width: 100%;
            margin-top: 5%;
            border-radius: 2%;
            background-color: #fff;
        }

        .container {
    display: flex;
    justify-content: space-around; /* Distributes space evenly between items */
    align-items: flex-start;
    gap: 20px;
    padding: 20px;
}

.standard-values, .rainfall-graph {
    flex: 1; /* Make both sections take equal space */
    padding: 20px;
    background-color: #f0f8ff;
    border: 1px solid #dcdcdc;
    border-radius: 10px;
    font-family: Arial, sans-serif;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1); /* Adds a subtle shadow for better definition */
}

.standard-values strong, .rainfall-graph strong {
    color: #2c3e50;
    font-size: 18px;
    display: block;
    margin-bottom: 10px;
}

.standard-values p, .rainfall-graph p {
    margin: 10px 0;
    font-size: 16px;
    color: #34495e;
}

.standard-values p strong, .rainfall-graph .bar-container p strong {
    color: #2980b9;
}

.rainfall-graph .bar-container {
    margin-bottom: 10px;
}

.rainfall-graph .bar {
    height: 20px;
    border-radius: 5px;
    text-align: right;
    color: white;
    padding-right: 5px;
    font-size: 14px;
    line-height: 20px;
}

    </style>
</head>
<body>
    <!-- NavBar -->
    <div class="navbar">
        <div class="logo">RainVista</div>
        <div>
            <a href="/">Home</a>
            <a href="/forecast">Predict</a>
            <a href="/stats">Data Analysis</a>
        </div>
    </div>
    <!-- Report -->
    <div class="report-content"></div>

    <div class="container">
        <div class="standard-values">
            <strong>Rainfall Analysis Standard Values:</strong><br>
            <p><strong>High Cloud Cover:</strong> &gt; 70%</p>
            <p><strong>Moderate Cloud Cover:</strong> 50% - 70%</p>
            <p><strong>High Humidity:</strong> &gt; 80%</p>
            <p><strong>Moderate Humidity:</strong> 60% - 80%</p>
            <p><strong>Low Atmospheric Pressure:</strong> &lt; 1010 hPa</p>
            <p><strong>Moderate Atmospheric Pressure:</strong> 1010 - 1020 hPa</p>
            <p><strong>Temperature:</strong> If temperature is lower than the dew point, condensation and rainfall are more likely.</p>
            <p><strong>Wind Speed:</strong> Wind speeds &gt; 15 km/h can indicate storm systems, increasing rainfall likelihood.</p>
            <p><strong>Precipitable Water:</strong> &gt; 20 mm can indicate sufficient moisture in the air for rainfall.</p>
        </div>
    
        <div class="rainfall-graph">
            <strong>Rainfall Likelihood Factors</strong><br>
            <div class="bar-container">
                <p><strong>High Cloud Cover:</strong></p>
                <div class="bar" style="width: 70%; background-color: #3498db;">&gt; 70%</div>
            </div>
            <div class="bar-container">
                <p><strong>Moderate Cloud Cover:</strong></p>
                <div class="bar" style="width: 60%; background-color: #2ecc71;">50% - 70%</div>
            </div>
            <div class="bar-container">
                <p><strong>High Humidity:</strong></p>
                <div class="bar" style="width: 80%; background-color: #e74c3c;">&gt; 80%</div>
            </div>
            <div class="bar-container">
                <p><strong>Moderate Humidity:</strong></p>
                <div class="bar" style="width: 70%; background-color: #f39c12;">60% - 80%</div>
            </div>
            <div class="bar-container">
                <p><strong>Low Atmospheric Pressure:</strong></p>
                <div class="bar" style="width: 50%; background-color: #9b59b6;">&lt; 1010 hPa</div>
            </div>
            <div class="bar-container">
                <p><strong>Moderate Atmospheric Pressure:</strong></p>
                <div class="bar" style="width: 60%; background-color: #16a085;">1010 - 1020 hPa</div>
            </div>
            <div class="bar-container">
                <p><strong>Wind Speed:</strong></p>
                <div class="bar" style="width: 40%; background-color: #2980b9;">&gt; 15 km/h</div>
            </div>
            <div class="bar-container">
                <p><strong>Precipitable Water:</strong></p>
                <div class="bar" style="width: 90%; background-color: #27ae60;">&gt; 20 mm</div>
            </div>
        </div>
    </div>
    
    
    
    
    <!-- Graph -->
    <div class="graph-container">
        <canvas id="weatherGraph" class="graph"></canvas>
        <canvas id="parameterBarGraph" class="graph"></canvas>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        // Fetch the API key from localStorage
        const API_KEY = '5d06eb37590d61c048926d8d37b513ac';

        if (!API_KEY) {
            alert('API Key is missing! Please ensure the API key is correctly set.');
            window.location.href = '/'; // Redirect to the main page
        }

        // Retrieve city details from localStorage
        const cityDetails = JSON.parse(localStorage.getItem('cityDetails'));

        if (cityDetails) {
            const { name: cityName, coord } = cityDetails;

            if (cityName && coord.lat && coord.lon) {
                const WEATHER_API_URL = `https://api.openweathermap.org/data/2.5/weather?lat=${coord.lat}&lon=${coord.lon}&units=metric&appid=${API_KEY}`;

                fetch(WEATHER_API_URL)
                    .then(response => response.json())
                    .then(data => {
                        data.cityName = cityName; // Add city name to data for reporting
                        const report = generateRainfallReport(data);
                        document.querySelector(".report-content").innerHTML = report;
                        generateRainfallGraph(data);
                        generateParameterBarGraph(data);
                    })
                    .catch(error => {
                        console.error("Error fetching weather data:", error);
                        alert("An error occurred while fetching the weather forecast!");
                    });
            } else {
                alert("Missing location data. Please return to the main page and try again.");
                window.location.href = '/'; // Redirect to the main page
            }
        } else {
            alert("City details are missing. Please return to the main page and try again.");
            window.location.href = '/'; // Redirect to the main page
        }

        // Function to generate a detailed weather report explaining rainfall predictions
        const generateRainfallReport = (weatherItem) => {
            const cloudCover = weatherItem.clouds.all; // Cloud cover percentage
            const humidity = weatherItem.main.humidity; // Humidity percentage
            const pressure = weatherItem.main.pressure; // Atmospheric pressure in hPa
            const windSpeed = weatherItem.wind.speed; // Wind speed in m/s
            const description = weatherItem.weather[0].description; // Weather description

            // Initialize report with basic weather information
            let report = `<h2>Weather Report for ${weatherItem.cityName}</h2>`;
            report += `<p><strong>Condition:</strong> ${capitalizeFirstLetter(description)}</p>`;
            report += `<p><strong>Cloud Cover:</strong> ${cloudCover}%</p>`;
            report += `<p><strong>Humidity:</strong> ${humidity}%</p>`;
            report += `<p><strong>Pressure:</strong> ${pressure} hPa</p>`;
            report += `<p><strong>Wind Speed:</strong> ${windSpeed} m/s</p>`;

            // Analyzing the data to explain the reason for rainfall or slight rainfall
            report += `<div class="analysis-section"><strong>Analysis:</strong><br>`;

            if (cloudCover > 70 && humidity > 80 && pressure < 1010) {
                report += `<p>Rainfall is expected due to the following reasons:</p>`;
                report += `<ul>`;
                report += `<li><strong>High Cloud Cover:</strong> With a cloud cover of ${cloudCover}%, the sky is significantly overcast. This means there is a high concentration of clouds capable of producing rain.</li>`;
                report += `<li><strong>High Humidity:</strong> The humidity level at ${humidity}% indicates that the air is saturated with moisture. High humidity levels often lead to precipitation when combined with sufficient cloud cover.</li>`;
                report += `<li><strong>Low Atmospheric Pressure:</strong> The atmospheric pressure is relatively low at ${pressure} hPa. Low pressure is typically associated with storm systems and rainfall, as it encourages air to rise and cool, leading to condensation and rain.</li>`;
                report += `</ul>`;
            } else if (cloudCover > 50 && humidity > 60 && pressure < 1020) {
                report += `<p>Slight rainfall is likely due to the following factors:</p>`;
                report += `<ul>`;
                report += `<li><strong>Moderate Cloud Cover:</strong> The cloud cover is ${cloudCover}%, which suggests some cloudiness but not enough to cause heavy rain. These clouds may produce light showers.</li>`;
                report += `<li><strong>Moderate Humidity:</strong> Humidity at ${humidity}% is sufficient to hold moisture in the air, which can result in slight rainfall, especially when combined with moderate cloud cover.</li>`;
                report += `<li><strong>Slightly Lower Pressure:</strong> The pressure is ${pressure} hPa, which is slightly lower than average. This decrease in pressure can lead to light precipitation as the air begins to cool and condense.</li>`;
                report += `</ul>`;
            } else {
                report += `<p>No significant rainfall is expected due to the following observations:</p>`;
                report += `<ul>`;
                report += `<li><strong>Low Cloud Cover:</strong> The cloud cover is only ${cloudCover}%, indicating that the sky is mostly clear with little chance of rain.</li>`;
                report += `<li><strong>Low Humidity:</strong> With humidity at ${humidity}%, the air is relatively dry, reducing the likelihood of precipitation.</li>`;
                report += `<li><strong>Stable Atmospheric Pressure:</strong> The pressure is ${pressure} hPa, which is typical for stable weather conditions. High or stable pressure usually prevents cloud formation and rain.</li>`;
                report += `</ul>`;
            }

            report += `</div><div class="conclusion"><strong>Conclusion:</strong> The weather conditions suggest that ${description.includes("rain") ? "rainfall" : "no significant rainfall"} is expected based on the analysis of cloud cover, humidity, and atmospheric pressure.</div>`;

            return report;
        };

        // Function to generate a dynamic line graph predicting future rainfall
        const generateRainfallGraph = (weatherData) => {
            const ctx = document.getElementById('weatherGraph').getContext('2d');

            // Placeholder data for future rainfall predictions (replace this with actual prediction data)
            const futureData = [
                { time: 'Now', rainfall: weatherData.rain ? weatherData.rain['1h'] || 0 : 0 },
                { time: '1h', rainfall: (weatherData.rain ? weatherData.rain['1h'] || 0 : 0) + 1.5 },
                { time: '2h', rainfall: (weatherData.rain ? weatherData.rain['1h'] || 0 : 0) + 2.2 },
                { time: '3h', rainfall: (weatherData.rain ? weatherData.rain['1h'] || 0 : 0) + 0.8 },
                { time: '4h', rainfall: (weatherData.rain ? weatherData.rain['1h'] || 0 : 0) + 1.1 },
                { time: '5h', rainfall: (weatherData.rain ? weatherData.rain['1h'] || 0 : 0) + 2.5 },
                { time: '6h', rainfall: (weatherData.rain ? weatherData.rain['1h'] || 0 : 0) + 3.3 },
            ];

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: futureData.map(entry => entry.time),
                    datasets: [{
                        label: 'Predicted Rainfall (mm)',
                        data: futureData.map(entry => entry.rainfall),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0)',
                        fill: true,
                        tension: .2,
                    }]
                },
                options: {
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Rainfall (mm)'
                            },
                            beginAtZero: true
                        }
                    }
                }
            });
        };

        // Function to generate a bar graph comparing cloud cover, humidity, and pressure
        const generateParameterBarGraph = (weatherData) => {
            const ctx = document.getElementById('parameterBarGraph').getContext('2d');

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Cloud Cover', 'Humidity', 'Pressure'],
                    datasets: [{
                        label: 'Weather Parameters',
                        data: [weatherData.clouds.all, weatherData.main.humidity, weatherData.main.pressure],
                        backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)'],
                        borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        };

        // Utility function to capitalize the first letter of a string
        const capitalizeFirstLetter = (string) => {
            return string.charAt(0).toUpperCase() + string.slice(1);
        };
    </script>
</body>
</html>
